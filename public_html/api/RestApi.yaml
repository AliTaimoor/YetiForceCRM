openapi: 3.0.0
info:
  title: 'YetiForce API for Webservice App. Type: RestApi'
  description: "Skip the `/webservice` fragment for connections via ApiProxy. There are two ways to connect to API, with or without rewrite, below are examples of both:\n * rewrite\n * - __CRM_URL__/webservice/RestApi/Users/Login\n * - __CRM_URL__/webservice/RestApi/Accounts/RecordRelatedList/117/Contacts\n * without rewrite\n * - __CRM_URL__/webservice.php?_container=RestApi&module=Users&action=Login\n * - __CRM_URL__/webservice.php?_container=RestApi&module=Accounts&action=RecordRelatedList&record=117&param=Contacts"
  termsOfService: 'https://yetiforce.com/'
  contact:
    name: 'Devs API Team'
    url: 'https://yetiforce.com/'
    email: devs@yetiforce.com
  license:
    name: 'YetiForce Public License v3'
    url: 'https://yetiforce.com/en/yetiforce/license'
  version: '0.2'
servers:
  -
    url: 'https://gitdeveloper.yetiforce.com'
    description: 'Demo server of the development version'
  -
    url: 'https://gitstable.yetiforce.com'
    description: 'Demo server of the latest stable version'
paths:
  /webservice/RestApi/Files:
    put:
      tags:
        - BaseAction
      summary: 'Download files'
      description: 'Download files from the system'
      operationId: 'Api\RestApi\BaseAction\Files::put'
      parameters:
        -
          name: X-ENCRYPTED
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/Header-Encrypted'
      requestBody:
        description: 'Action parameters to download the file'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BaseAction_Files_Request'
          application/xml:
            schema:
              $ref: '#/components/schemas/BaseAction_Files_Request'
      responses:
        '200':
          description: 'File content, mediaType is dynamic depending on the type of file being downloaded'
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '403':
          description: 'No permissions'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
            application/xml:
              schema:
                $ref: '#/components/schemas/Exception'
        '404':
          description: 'File not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
            application/xml:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: 'Invalid method'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
            application/xml:
              schema:
                $ref: '#/components/schemas/Exception'
        '406':
          description: 'Not Acceptable'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
            application/xml:
              schema:
                $ref: '#/components/schemas/Exception'
      security:
        -
          basicAuth: []
          ApiKeyAuth: []
          token: []
  /webservice/RestApi/Modules:
    get:
      tags:
        - BaseAction
      summary: 'The allowed actions of the module list'
      description: 'Get the permitted module list action, along with their translated action'
      operationId: 'Api\RestApi\BaseAction\Modules::get'
      parameters:
        -
          name: X-ENCRYPTED
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/Header-Encrypted'
      responses:
        '200':
          description: 'List of permitted modules'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseAction_Modules_ResponseBody'
            application/xml:
              schema:
                $ref: '#/components/schemas/BaseAction_Modules_ResponseBody'
        '401':
          description: '`No sent token` OR `Invalid token`'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
            application/xml:
              schema:
                $ref: '#/components/schemas/Exception'
        '403':
          description: 'No permissions for module'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
            application/xml:
              schema:
                $ref: '#/components/schemas/Exception'
      security:
        -
          basicAuth: []
          ApiKeyAuth: []
          token: []
  '/webservice/RestApi/{moduleName}/CustomView':
    get:
      tags:
        - BaseModule
      summary: 'List of custom view'
      description: 'Gets a list of custom view'
      operationId: 'Api\RestApi\BaseModule\CustomView::get'
      parameters:
        -
          name: moduleName
          in: path
          description: 'Module name'
          required: true
          schema:
            type: string
          example: Contacts
      responses:
        '200':
          description: 'List of custom view'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseModule_Get_CustomView_Response'
            application/xml:
              schema:
                $ref: '#/components/schemas/BaseModule_Get_CustomView_Response'
        '401':
          description: '`No sent token`, `Invalid token`, `Token has expired`'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
            application/xml:
              schema:
                $ref: '#/components/schemas/Exception'
        '403':
          description: '`No permissions for module`'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
            application/xml:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: '`Invalid method`'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
            application/xml:
              schema:
                $ref: '#/components/schemas/Exception'
      security:
        -
          basicAuth: []
          ApiKeyAuth: []
          token: []
  '/webservice/RestApi/{moduleName}/CustomView/{cvId}':
    get:
      tags:
        - BaseModule
      summary: 'Data of custom view'
      description: 'Gets data of custom view'
      operationId: 'Api\RestApi\BaseModule\CustomView::get(cvId)'
      parameters:
        -
          name: moduleName
          in: path
          description: 'Module name'
          required: true
          schema:
            type: string
          example: Contacts
        -
          name: cvId
          in: path
          description: 'Custom view ID'
          required: true
          schema:
            type: integer
          example: 12
      responses:
        '200':
          description: 'Data of custom view'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseModule_Get_CustomViewById_Response'
            application/xml:
              schema:
                $ref: '#/components/schemas/BaseModule_Get_CustomViewById_Response'
        '401':
          description: '`No sent token`, `Invalid token`, `Token has expired`'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
            application/xml:
              schema:
                $ref: '#/components/schemas/Exception'
        '403':
          description: '`No permissions to view record` OR `No permissions for module or data provided in the request`'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
            application/xml:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: '`Invalid method`'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
            application/xml:
              schema:
                $ref: '#/components/schemas/Exception'
      security:
        -
          basicAuth: []
          ApiKeyAuth: []
          token: []
  '/webservice/RestApi/{moduleName}/Fields':
    get:
      tags:
        - BaseModule
      summary: 'Get data about fields, blocks and inventory'
      description: 'Returns information about fields, blocks and inventory based on the selected module'
      operationId: 'Api\RestApi\BaseModule\Fields::get'
      parameters:
        -
          name: moduleName
          in: path
          description: 'Module name'
          required: true
          schema:
            type: string
          example: Contacts
        -
          name: X-ENCRYPTED
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/Header-Encrypted'
      responses:
        '200':
          description: 'Fields, blocks and inventory details'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseModule_Fields_ResponseBody'
            application/xml:
              schema:
                $ref: '#/components/schemas/BaseModule_Fields_ResponseBody'
      security:
        -
          basicAuth: []
          ApiKeyAuth: []
          token: []
  '/webservice/RestApi/{moduleName}/Privileges':
    get:
      tags:
        - BaseModule
      summary: 'Get privileges for module'
      description: 'Gets the list of actions that the user has access to in the module'
      operationId: 'Api\RestApi\BaseModule\Privileges::get'
      parameters:
        -
          name: moduleName
          in: path
          description: 'Module name'
          required: true
          schema:
            type: string
          example: Contacts
        -
          name: X-ENCRYPTED
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/Header-Encrypted'
      responses:
        '200':
          description: 'Privileges details'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseModule_Privileges_ResponseBody'
            application/xml:
              schema:
                $ref: '#/components/schemas/BaseModule_Privileges_ResponseBody'
      security:
        -
          basicAuth: []
          ApiKeyAuth: []
          token: []
  '/webservice/RestApi/{moduleName}/Record/{recordId}':
    get:
      tags:
        - BaseModule
      summary: 'Data for the record'
      description: 'Gets the details of a record'
      operationId: getRecord
      parameters:
        -
          name: moduleName
          in: path
          description: 'Module name'
          required: true
          schema:
            type: string
          example: Contacts
        -
          name: recordId
          in: path
          description: 'Record id'
          required: true
          schema:
            type: integer
          example: 116
        -
          name: X-ENCRYPTED
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/Header-Encrypted'
        -
          name: x-raw-data
          in: header
          description: 'Gets raw data'
          required: false
          schema:
            type: integer
            enum:
              - 0
              - 1
          example: 1
        -
          name: x-parent-id
          in: header
          description: 'Gets parent id'
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: 'Gets data for the record'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseModule_Get_Record_Response'
            application/xml:
              schema:
                $ref: '#/components/schemas/BaseModule_Get_Record_Response'
        '403':
          description: '`No permissions to remove record` OR `No permissions to view record` OR `No permissions to edit record`'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
            application/xml:
              schema:
                $ref: '#/components/schemas/Exception'
        '404':
          description: '`No record id` OR `Record doesn''t exist`'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
            application/xml:
              schema:
                $ref: '#/components/schemas/Exception'
      security:
        -
          basicAuth: []
          ApiKeyAuth: []
          token: []
    put:
      tags:
        - BaseModule
      summary: 'Edit record'
      description: 'Retrieves data for editing a record'
      operationId: 'Api\RestApi\BaseModule\Record::put'
      parameters:
        -
          name: moduleName
          in: path
          description: 'Module name'
          required: true
          schema:
            type: string
          example: Contacts
        -
          name: recordId
          in: path
          description: 'Record id'
          required: true
          schema:
            type: integer
          example: 116
        -
          name: X-ENCRYPTED
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/Header-Encrypted'
      requestBody:
        description: 'Contents of the request contains an associative array with the data record.'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Record_Edit_Details'
          application/xml:
            schema:
              $ref: '#/components/schemas/Record_Edit_Details'
      responses:
        '200':
          description: 'Contents of the response contains only id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseModule_Put_Record_Response'
            application/xml:
              schema:
                $ref: '#/components/schemas/BaseModule_Put_Record_Response'
          links:
            GetRecordById:
              $ref: '#/components/links/GetRecordById'
      security:
        -
          basicAuth: []
          ApiKeyAuth: []
          token: []
    delete:
      tags:
        - BaseModule
      summary: 'Delete record'
      description: 'Changes the state of a record, moving it to the trash'
      operationId: 'Api\RestApi\BaseModule\Record::delete'
      parameters:
        -
          name: moduleName
          in: path
          description: 'Module name'
          required: true
          schema:
            type: string
          example: Contacts
        -
          name: recordId
          in: path
          description: 'Record id'
          required: true
          schema:
            type: integer
          example: 116
        -
          name: X-ENCRYPTED
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/Header-Encrypted'
      responses:
        '200':
          description: 'List of records moved to the trash'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseModule_Delete_Record_Response'
            application/xml:
              schema:
                $ref: '#/components/schemas/BaseModule_Delete_Record_Response'
      security:
        -
          basicAuth: []
          ApiKeyAuth: []
          token: []
  '/webservice/RestApi/{moduleName}/Record':
    post:
      tags:
        - BaseModule
      summary: 'Create record'
      description: 'Gets data to save record'
      operationId: 'Api\RestApi\BaseModule\Record::post'
      parameters:
        -
          name: moduleName
          in: path
          description: 'Module name'
          required: true
          schema:
            type: string
          example: Contacts
        -
          name: X-ENCRYPTED
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/Header-Encrypted'
      requestBody:
        description: 'Contents of the request contains an associative array with the data record.'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Record_Edit_Details'
          application/xml:
            schema:
              $ref: '#/components/schemas/Record_Edit_Details'
      responses:
        '200':
          description: 'Contents of the response contains only id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseModule_Post_Record_Response'
            application/xml:
              schema:
                $ref: '#/components/schemas/BaseModule_Post_Record_Response'
          links:
            GetRecordById:
              $ref: '#/components/links/GetRecordById'
      security:
        -
          basicAuth: []
          ApiKeyAuth: []
          token: []
  '/webservice/RestApi/{moduleName}/RecordHistory/{recordId}':
    get:
      tags:
        - BaseModule
      summary: 'Record history'
      description: 'Gets the history of the record'
      operationId: 'Api\RestApi\BaseModule\RecordHistory::get'
      parameters:
        -
          name: moduleName
          in: path
          description: 'Module name'
          required: true
          schema:
            type: string
          example: Contacts
        -
          name: recordId
          in: path
          description: 'Record id'
          required: true
          schema:
            type: integer
          example: 116
        -
          name: x-row-limit
          in: header
          description: 'Get rows limit, default: 100'
          required: false
          schema:
            type: integer
          example: 50
        -
          name: x-row-offset
          in: header
          description: 'Offset, default: 0'
          required: false
          schema:
            type: integer
          example: 0
        -
          name: x-start-with
          in: header
          description: 'Show history from given ID'
          required: false
          schema:
            type: integer
          example: 5972
        -
          name: x-raw-data
          in: header
          description: 'Gets raw data'
          required: false
          schema:
            type: integer
            enum:
              - 0
              - 1
          example: 1
        -
          name: X-ENCRYPTED
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/Header-Encrypted'
      responses:
        '200':
          description: 'Recent activities detail'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseModule_Get_RecordHistory_Response'
            application/xml:
              schema:
                $ref: '#/components/schemas/BaseModule_Get_RecordHistory_Response'
        '403':
          description: '`No permissions to view record` OR `MadTracker is turned off`'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
            application/xml:
              schema:
                $ref: '#/components/schemas/Exception'
        '404':
          description: 'Record doesn''t exist'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
            application/xml:
              schema:
                $ref: '#/components/schemas/Exception'
      security:
        -
          basicAuth: []
          ApiKeyAuth: []
          token: []
  '/webservice/RestApi/{moduleName}/RecordRelatedList/{recordId}/{relatedModuleName}':
    get:
      tags:
        - BaseModule
      summary: 'Related list of records'
      description: 'Gets a list of related records'
      operationId: 'Api\RestApi\BaseModule\RecordRelatedList::get'
      parameters:
        -
          name: moduleName
          in: path
          description: 'Module name'
          required: true
          schema:
            type: string
          example: Contacts
        -
          name: recordId
          in: path
          description: 'Record id'
          required: true
          schema:
            type: integer
          example: 116
        -
          name: relatedModuleName
          in: path
          description: 'Related module name'
          required: true
          schema:
            type: string
          example: Contacts
        -
          name: relationId
          in: query
          description: 'Relation id'
          required: false
          style: form
          schema:
            type: integer
        -
          name: cvId
          in: query
          description: 'Custom view id'
          required: false
          style: form
          schema:
            type: integer
        -
          name: x-raw-data
          in: header
          description: 'Gets raw data'
          required: false
          schema:
            type: integer
            enum:
              - 0
              - 1
          example: 1
        -
          name: x-row-limit
          in: header
          description: 'Get rows limit, default: 1000'
          required: false
          schema:
            type: integer
          example: 1000
        -
          name: x-row-offset
          in: header
          description: 'Offset, default: 0'
          required: false
          schema:
            type: integer
          example: 0
        -
          name: x-fields
          in: header
          description: 'JSON array in the list of fields to be returned in response'
          required: false
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        -
          name: x-condition
          in: header
          description: 'Conditions [Json format]'
          required: false
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conditions-Mix-For-Query-Generator'
        -
          name: x-order-by
          in: header
          description: 'Set the sorted results by columns [Json format]'
          required: false
          content:
            application/json:
              schema:
                title: 'Sort conditions'
                description: 'Multiple or one condition for a query generator'
                type: object
                additionalProperties:
                  title: 'Sort Direction'
                  type: string
                  enum: [ASC, DESC]
              example:
                field_name_1: ASC
                field_name_2: DESC
      responses:
        '200':
          description: 'List of entries'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseModule_RecordRelatedList_ResponseBody'
            application/xml:
              schema:
                $ref: '#/components/schemas/BaseModule_RecordRelatedList_ResponseBody'
        '400':
          description: 'Relationship does not exist'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
            application/xml:
              schema:
                $ref: '#/components/schemas/Exception'
        '403':
          description: 'No permissions to view record'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
            application/xml:
              schema:
                $ref: '#/components/schemas/Exception'
        '404':
          description: 'Record doesn''t exist'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
            application/xml:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: 'No relation module name'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
            application/xml:
              schema:
                $ref: '#/components/schemas/Exception'
      security:
        -
          basicAuth: []
          ApiKeyAuth: []
          token: []
  '/webservice/RestApi/{moduleName}/RecordsList':
    get:
      tags:
        - BaseModule
      summary: 'List of records'
      description: 'Gets a list of records'
      operationId: 'Api\RestApi\BaseModule\RecordsList::get'
      parameters:
        -
          name: moduleName
          in: path
          description: 'Module name'
          required: true
          schema:
            type: string
          example: Contacts
        -
          name: x-raw-data
          in: header
          description: 'Gets raw data'
          required: false
          schema:
            type: integer
            enum:
              - 0
              - 1
          example: 1
        -
          name: x-row-limit
          in: header
          description: 'Get rows limit, default: 100'
          required: false
          schema:
            type: integer
          example: 50
        -
          name: x-row-offset
          in: header
          description: 'Offset, default: 0'
          required: false
          schema:
            type: integer
          example: 0
        -
          name: x-row-order-field
          in: header
          description: 'Sets the ORDER BY part of the query record list'
          required: false
          schema:
            type: string
          example: lastname
        -
          name: x-row-order
          in: header
          description: 'Sorting direction'
          required: false
          schema:
            type: string
            enum:
              - ASC
              - DESC
          example: DESC
        -
          name: x-fields
          in: header
          description: 'JSON array in the list of fields to be returned in response'
          required: false
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        -
          name: x-condition
          in: header
          description: 'Conditions [Json format]'
          required: false
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conditions-Mix-For-Query-Generator'
        -
          name: x-only-column
          in: header
          description: 'Return only column names'
          required: false
          schema:
            type: integer
            enum:
              - 0
              - 1
          example: 1
        -
          name: x-parent-id
          in: header
          description: 'Parent record id'
          required: false
          schema:
            type: integer
          example: 5
        -
          name: x-cv-id
          in: header
          description: 'Custom view ID'
          required: false
          schema:
            type: integer
          example: 5
      responses:
        '200':
          description: 'List of entries'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseModule_RecordsList_ResponseBody'
            application/xml:
              schema:
                $ref: '#/components/schemas/BaseModule_RecordsList_ResponseBody'
        '400':
          description: 'Incorrect json syntax: x-fields'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
            application/xml:
              schema:
                $ref: '#/components/schemas/Exception'
        '401':
          description: 'No sent token, Invalid token, Token has expired'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
            application/xml:
              schema:
                $ref: '#/components/schemas/Exception'
        '403':
          description: '`No permissions for module` OR `No permissions for custom view: x-cv-id`'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
            application/xml:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: 'Invalid method'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
            application/xml:
              schema:
                $ref: '#/components/schemas/Exception'
      security:
        -
          basicAuth: []
          ApiKeyAuth: []
          token: []
  '/webservice/RestApi/{moduleName}/RelatedModules/{recordId}':
    get:
      tags:
        - BaseModule
      summary: 'Related list of modules'
      description: 'Gets a list of related modules'
      operationId: 'Api\RestApi\BaseModule\RelatedModules::get'
      parameters:
        -
          name: moduleName
          in: path
          description: 'Module name'
          required: true
          schema:
            type: string
          example: Contacts
        -
          name: recordId
          in: path
          description: 'Record id'
          required: true
          schema:
            type: integer
          example: 116
      responses:
        '200':
          description: 'List of related modules'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseModule_Get_RelatedModules_Response'
            application/xml:
              schema:
                $ref: '#/components/schemas/BaseModule_Get_RelatedModules_Response'
        '403':
          description: '`No permissions to view record`'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
            application/xml:
              schema:
                $ref: '#/components/schemas/Exception'
        '404':
          description: '`Record doesn''t exist` OR `No record id`'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
            application/xml:
              schema:
                $ref: '#/components/schemas/Exception'
      security:
        -
          basicAuth: []
          ApiKeyAuth: []
          token: []
  /webservice/RestApi/Users/AccessActivityHistory:
    get:
      tags:
        - Users
      summary: 'History of access activity data'
      description: 'Get user history of access activity'
      operationId: 'Api\RestApi\Users\AccessActivityHistory::get'
      parameters:
        -
          name: X-ENCRYPTED
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/Header-Encrypted'
        -
          name: x-row-limit
          in: header
          description: 'Get rows limit, default: 50'
          required: false
          schema:
            type: integer
          example: 1000
        -
          name: x-row-offset
          in: header
          description: 'Offset, default: 0'
          required: false
          schema:
            type: integer
          example: 0
        -
          name: x-condition
          in: header
          description: 'Conditions [Json format]'
          required: false
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conditions-For-Native-Query'
      responses:
        '200':
          description: 'User history of access activity'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users_Get_AccessActivityHistory_Response'
            application/xml:
              schema:
                $ref: '#/components/schemas/Users_Get_AccessActivityHistory_Response'
      security:
        -
          basicAuth: []
          ApiKeyAuth: []
          token: []
  /webservice/RestApi/Users/ChangePassword:
    put:
      tags:
        - Users
      summary: 'User password change'
      description: 'User password change'
      operationId: 'Api\RestApi\Users\ChangePassword::put'
      parameters:
        -
          name: X-ENCRYPTED
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/Header-Encrypted'
      requestBody:
        description: 'Input data'
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Users_Put_ChangePassword_Request'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Users_Put_ChangePassword_Request'
          application/json:
            schema:
              $ref: '#/components/schemas/Users_Put_ChangePassword_Request'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users_Put_ChangePassword_Response'
            application/xml:
              schema:
                $ref: '#/components/schemas/Users_Put_ChangePassword_Response'
      security:
        -
          basicAuth: []
          ApiKeyAuth: []
          token: []
  /webservice/RestApi/Users/Login:
    post:
      tags:
        - Users
      summary: 'Logs user'
      description: 'Logs user into the system'
      operationId: 'Api\RestApi\Users\Login::post'
      parameters:
        -
          name: X-ENCRYPTED
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/Header-Encrypted'
      requestBody:
        description: 'Input data format'
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Users_Login_RequestBody'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Users_Login_RequestBody'
          application/json:
            schema:
              $ref: '#/components/schemas/Users_Login_RequestBody'
      responses:
        '200':
          description: 'User details'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users_Login_ResponseBody'
            application/xml:
              schema:
                $ref: '#/components/schemas/Users_Login_ResponseBody'
        '401':
          description: '`Invalid data access` OR `Invalid user password` OR `No crmid` OR `2FA verification error`'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
            application/xml:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: 'Invalid method'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
            application/xml:
              schema:
                $ref: '#/components/schemas/Exception'
        '412':
          description: 'No 2FA TOTP code'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
            application/xml:
              schema:
                $ref: '#/components/schemas/Exception'
      security:
        -
          basicAuth: []
          ApiKeyAuth: []
  /webservice/RestApi/Users/Logout:
    put:
      tags:
        - Users
      summary: 'Logout user'
      description: 'Logout user out the system'
      operationId: 'Api\RestApi\Users\Logout::put'
      parameters:
        -
          name: X-ENCRYPTED
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/Header-Encrypted'
      responses:
        '200':
          description: 'User details'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersLogoutResponseBody'
            application/xml:
              schema:
                $ref: '#/components/schemas/UsersLogoutResponseBody'
      security:
        -
          basicAuth: []
          ApiKeyAuth: []
          token: []
  '/webservice/RestApi/Users/Record/{userId}':
    get:
      tags:
        - Users
      summary: 'Data for the user'
      description: 'Gets details about the user'
      operationId: 'Api\RestApi\Users\Record::get'
      parameters:
        -
          name: userId
          in: path
          description: 'User id'
          required: true
          schema:
            type: integer
          example: 116
        -
          name: X-ENCRYPTED
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/Header-Encrypted'
        -
          name: x-raw-data
          in: header
          description: 'Gets raw data'
          required: false
          schema:
            type: integer
            enum:
              - 0
              - 1
          example: 1
      responses:
        '200':
          description: 'Gets data for the user'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users_Get_Record_Response'
            application/xml:
              schema:
                $ref: '#/components/schemas/Users_Get_Record_Response'
        '403':
          description: 'Access denied, access for administrators only'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
            application/xml:
              schema:
                $ref: '#/components/schemas/Exception'
        '404':
          description: 'User doesn''t exist'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
            application/xml:
              schema:
                $ref: '#/components/schemas/Exception'
      security:
        -
          basicAuth: []
          ApiKeyAuth: []
          token: []
  /webservice/RestApi/Users/RecordsList:
    get:
      tags:
        - Users
      summary: 'List of users'
      description: 'Gets a list of all users'
      operationId: 'Api\RestApi\Users\RecordsList::get'
      parameters:
        -
          name: x-raw-data
          in: header
          description: 'Gets raw data'
          required: false
          schema:
            type: integer
            enum:
              - 0
              - 1
          example: 1
        -
          name: x-row-limit
          in: header
          description: 'Get rows limit, default: 1000'
          required: false
          schema:
            type: integer
          example: 1000
        -
          name: x-row-offset
          in: header
          description: 'Offset, default: 0'
          required: false
          schema:
            type: integer
          example: 0
        -
          name: x-row-order-field
          in: header
          description: 'Sets the ORDER BY part of the query record list'
          required: false
          schema:
            type: string
          example: lastname
        -
          name: x-row-order
          in: header
          description: 'Sorting direction'
          required: false
          schema:
            type: string
            enum:
              - ASC
              - DESC
          example: DESC
        -
          name: x-fields
          in: header
          description: 'JSON array in the list of fields to be returned in response'
          required: false
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        -
          name: x-condition
          in: header
          description: 'Conditions [Json format]'
          required: false
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conditions-Mix-For-Query-Generator'
        -
          name: x-parent-id
          in: header
          description: 'Parent record id'
          required: false
          schema:
            type: integer
          example: 5
      responses:
        '200':
          description: 'List of entries'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users_RecordsList_ResponseBody'
            application/xml:
              schema:
                $ref: '#/components/schemas/Users_RecordsList_ResponseBody'
        '400':
          description: 'Incorrect json syntax: x-fields'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
            application/xml:
              schema:
                $ref: '#/components/schemas/Exception'
        '401':
          description: 'No sent token, Invalid token, Token has expired'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
            application/xml:
              schema:
                $ref: '#/components/schemas/Exception'
        '403':
          description: 'No permissions for module'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
            application/xml:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: 'Invalid method'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
            application/xml:
              schema:
                $ref: '#/components/schemas/Exception'
      security:
        -
          basicAuth: []
          ApiKeyAuth: []
          token: []
  /webservice/RestApi/Users/ResetPassword:
    put:
      tags:
        - Users
      summary: 'User password reset-Passwordchange'
      description: 'User password reset - Password change'
      operationId: 'Api\RestApi\Users\ResetPassword::put'
      parameters:
        -
          name: X-ENCRYPTED
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/Header-Encrypted'
      requestBody:
        description: 'Input data'
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Users_Put_ResetPassword_Request'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Users_Put_ResetPassword_Request'
          application/json:
            schema:
              $ref: '#/components/schemas/Users_Put_ResetPassword_Request'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users_Put_ResetPassword_Response'
            application/xml:
              schema:
                $ref: '#/components/schemas/Users_Put_ResetPassword_Response'
        '404':
          description: 'User with this email address does not exist'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
            application/xml:
              schema:
                $ref: '#/components/schemas/Exception'
        '405':
          description: ERR_TOKEN_DOES_NOT_EXIST
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
            application/xml:
              schema:
                $ref: '#/components/schemas/Exception'
      security:
        -
          basicAuth: []
          ApiKeyAuth: []
    post:
      tags:
        - Users
      summary: 'User password reset-Generatingandsendingaone-timetoken'
      description: 'User password reset - Generating and sending a one-time token'
      operationId: 'Api\RestApi\Users\ResetPassword::post'
      parameters:
        -
          name: X-ENCRYPTED
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/Header-Encrypted'
      requestBody:
        description: 'Input data'
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Users_Post_ResetPassword_Request'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Users_Post_ResetPassword_Request'
          application/json:
            schema:
              $ref: '#/components/schemas/Users_Post_ResetPassword_Request'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users_Post_ResetPassword_Response'
            application/xml:
              schema:
                $ref: '#/components/schemas/Users_Post_ResetPassword_Response'
        '404':
          description: 'User with this email address does not exist'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
            application/xml:
              schema:
                $ref: '#/components/schemas/Exception'
      security:
        -
          basicAuth: []
          ApiKeyAuth: []
  /webservice/RestApi/Users/TwoFactorAuth:
    get:
      tags:
        - Users
      summary: 'Get two factor authentication details'
      operationId: 'Api\RestApi\Users\TwoFactorAuth::get'
      parameters:
        -
          name: X-ENCRYPTED
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/Header-Encrypted'
      responses:
        '200':
          description: 'Authentication secret details'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users_Get_TwoFactorAuth_Response'
            application/xml:
              schema:
                $ref: '#/components/schemas/Users_Get_TwoFactorAuth_Response'
        '405':
          description: 'Invalid method'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
            application/xml:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: 'Two-factor authentication has not been enabled'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
            application/xml:
              schema:
                $ref: '#/components/schemas/Exception'
      security:
        -
          basicAuth: []
          ApiKeyAuth: []
          token: []
    post:
      tags:
        - Users
      summary: 'Activate two factor authentication'
      operationId: 'Api\RestApi\Users\TwoFactorAuth::post'
      parameters:
        -
          name: X-ENCRYPTED
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/Header-Encrypted'
      responses:
        '200':
          description: 'Access details'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users_post_TwoFactorAuth_Response'
            application/xml:
              schema:
                $ref: '#/components/schemas/Users_post_TwoFactorAuth_Response'
        '405':
          description: 'Invalid method'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
            application/xml:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: '`Two-factor authentication has not been enabled` OR `A secret 2FA key has already been generated.`'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
            application/xml:
              schema:
                $ref: '#/components/schemas/Exception'
      security:
        -
          basicAuth: []
          ApiKeyAuth: []
          token: []
    delete:
      tags:
        - Users
      summary: 'Disable two factor authentication'
      operationId: 'Api\RestApi\Users\TwoFactorAuth::delete'
      parameters:
        -
          name: X-ENCRYPTED
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/Header-Encrypted'
      responses:
        '200':
          description: 'Disable two factor authentication response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users_Delete_TwoFactorAuth_Response'
            application/xml:
              schema:
                $ref: '#/components/schemas/Users_Delete_TwoFactorAuth_Response'
        '405':
          description: 'Invalid method'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
            application/xml:
              schema:
                $ref: '#/components/schemas/Exception'
        '500':
          description: 'Two-factor authentication has not been enabled'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exception'
            application/xml:
              schema:
                $ref: '#/components/schemas/Exception'
      security:
        -
          basicAuth: []
          ApiKeyAuth: []
          token: []
components:
  schemas:
    BaseAction_Files_Request:
      title: 'Base action - Files request schema'
      description: 'Action parameters to download the file'
      properties:
        module:
          description: 'Put method.'
          type: string
          example: Documents
        actionName:
          description: 'Put method.'
          type: string
          example: DownloadFile
        record:
          description: 'Put method.'
          type: integer
          example: 1111
        fileid:
          description: 'Put method.'
          type: integer
          example: 333
      type: object
    BaseAction_Modules_ResponseBody:
      title: 'Base action - List of permitted modules'
      description: 'List of available modules'
      properties:
        status:
          title: 'A numeric value of 0 or 1 that indicates whether the communication is valid. 1 - success , 0 - error'
          description: 'Get permitted modules.'
          type: integer
          enum:
            - 0
            - 1
        result:
          description: 'List of permitted modules'
          type: object
          additionalProperties:
            description: 'Module name'
            type: string
            example: Accounts
      type: object
    BaseModule_Get_CustomView_Response:
      title: 'Base module - Response action - data of custom view list'
      description: 'Module action - Data of custom view list - response body'
      required:
        - status
        - result
      properties:
        status:
          title: 'A numeric value of 0 or 1 that indicates whether the communication is valid. 1 - success , 0 - error'
          description: 'Get custom view list method.'
          type: integer
          enum:
            - 0
            - 1
        result:
          description: 'List of custom view'
          type: object
          additionalProperties:
            $ref: '#/components/schemas/BaseModule_CustomViewById_Result'
      type: object
    BaseModule_Get_CustomViewById_Response:
      title: 'Base module - Response action - data of custom view by specific ID'
      description: 'Module action - custom view for specific ID - response body'
      required:
        - status
        - result
      properties:
        status:
          title: 'A numeric value of 0 or 1 that indicates whether the communication is valid. 1 - success , 0 - error'
          description: 'Get custom view list method.'
          type: integer
          enum:
            - 0
            - 1
        result:
          $ref: '#/components/schemas/BaseModule_CustomViewById_Result'
      type: object
    BaseModule_CustomViewById_Result:
      title: 'Data of custom view by specific ID'
      description: 'Module action - custom view for specific ID - response data'
      required:
        - cvid
        - viewname
        - entitytype
        - sequence
        - description
        - color
        - isFeatured
        - isDefault
      properties:
        cvid:
          description: 'Custom view ID'
          type: integer
          example: 12
        viewname:
          description: 'Custom view name'
          type: string
          example: 'Test 1'
        entitytype:
          description: 'Module name'
          type: string
          example: Accounts
        sequence:
          description: Sequence
          type: integer
          example: 1
        description:
          description: 'Custom view description'
          type: string
          example: Description
        color:
          description: 'Color for custom view'
          type: string
          example: '#c28306'
        isFeatured:
          description: 'Custom view is in favorites'
          type: boolean
          example: false
        isDefault:
          description: 'Custom view is default'
          type: boolean
          example: false
      type: object
    BaseModule_Fields_ResponseBody:
      title: 'Base module - Response action fields'
      description: 'Fields, blocks and inventory details'
      required:
        - status
        - result
      properties:
        status:
          title: 'A numeric value of 0 or 1 that indicates whether the communication is valid. 1 - success , 0 - error'
          description: 'Get data about fields, blocks and inventory.'
          type: integer
          enum:
            - 0
            - 1
        result:
          title: 'Fields parameters'
          description: 'Get data about fields, blocks and inventory.'
          required:
            - fields
            - blocks
          properties:
            fields:
              title: 'List of all available fields in the module'
              description: 'Get data about fields, blocks and inventory.'
              required:
                - name
                - label
                - type
                - mandatory
                - defaultvalue
                - presence
                - quickcreate
                - masseditable
                - header_field
                - maxlengthtext
                - maximumlength
                - maxwidthcolumn
                - tabindex
                - fieldtype
                - id
                - uitype
                - isEditable
                - isViewable
                - isReadOnly
                - isEditableReadOnly
                - sequence
                - fieldparams
                - blockId
                - helpInfo
                - dbStructure
                - queryOperators
              type: object
              additionalProperties:
                properties:
                  name: { title: 'Field name', description: 'Get data about fields, blocks and inventory.', type: string, example: subject }
                  label: { title: 'Field label translated into the user''s language', description: 'Get data about fields, blocks and inventory.', type: string, example: Subject }
                  type: { title: 'Field type', description: 'Get data about fields, blocks and inventory.', type: string, example: string }
                  mandatory: { title: 'Check if field is mandatory', description: 'Get data about fields, blocks and inventory.', type: boolean, example: true }
                  defaultvalue: { title: 'Default field value', description: 'Get data about fields, blocks and inventory.', type: string, example: '' }
                  presence: { title: 'Check if field is active', description: 'Get data about fields, blocks and inventory.', type: boolean, example: true }
                  quickcreate: { title: 'Check if field is active', description: 'Get data about fields, blocks and inventory.', type: boolean, example: true }
                  masseditable: { title: 'Check if field is quick create enabled', description: 'Get data about fields, blocks and inventory.', type: boolean, example: true }
                  header_field: { title: 'Field configuration available in the header', description: 'Get data about fields, blocks and inventory.', properties: { type: { title: Type, description: 'Get data about fields, blocks and inventory.', type: string, example: value }, class: { title: 'Gui class', description: 'Get data about fields, blocks and inventory.', type: string, example: badge-info } }, type: object }
                  maxlengthtext: { title: 'Max length text', description: 'Get data about fields, blocks and inventory.', type: integer, example: 0 }
                  maximumlength: { title: 'Maximum field range', description: 'Get data about fields, blocks and inventory.', type: string, example: '-2147483648,2147483647' }
                  maxwidthcolumn: { title: 'Max width column', description: 'Get data about fields, blocks and inventory.', type: integer, example: 0 }
                  tabindex: { title: 'Field tab index', description: 'Get data about fields, blocks and inventory.', type: integer, example: 0 }
                  fieldtype: { title: 'Field short data type', description: 'Get data about fields, blocks and inventory.', type: string, example: V }
                  picklistvalues: { title: 'Picklist values, available only for type of field: picklist, multipicklist, multiowner, multiReferenceValue, inventoryLimit, languages, currencyList, fileLocationType, taxes, multiListFields, mailScannerFields, country, modules, sharedOwner, categoryMultipicklist, tree', description: 'Get data about fields, blocks and inventory.', type: object }
                  date-format: { title: 'Date format, available only for type of field: date, datetime', description: 'Get data about fields, blocks and inventory.', type: string }
                  time-format: { title: 'Time format, available only for type of field: time', description: 'Get data about fields, blocks and inventory.', type: string }
                  currency_symbol: { title: 'Currency symbol, available only for type of field: currency', description: 'Get data about fields, blocks and inventory.', type: string }
                  decimal_separator: { title: 'Currency decimal separator, available only for type of field: currency', description: 'Get data about fields, blocks and inventory.', type: string }
                  group_separator: { title: 'Currency group separator, available only for type of field: currency', description: 'Get data about fields, blocks and inventory.', type: string }
                  restrictedDomains: { title: 'Email restricted domains, available only for type of field: email', description: 'Get data about fields, blocks and inventory.', properties: { yeti.com: { title: 'List of domains reserved by email', description: 'Get data about fields, blocks and inventory.', example: yeti.com } }, type: object }
                  limit: { title: 'Limit the amount of images, available only for type of field: multiImage, image', description: 'Get data about fields, blocks and inventory.', type: integer }
                  formats: { title: 'File Format, available only for type of field: multiImage, image', description: 'Get data about fields, blocks and inventory.', properties: { jpg: { title: 'List of file data formats', description: 'Get data about fields, blocks and inventory.', example: jpg } }, type: object }
                  id: { title: 'Field ID', description: 'Get data about fields, blocks and inventory.', type: integer, example: 24862 }
                  uitype: { title: 'Field UiType', description: 'Get data about fields, blocks and inventory.', type: integer, example: 1 }
                  isEditable: { title: 'Check if record is editable', description: 'Get data about fields, blocks and inventory.', type: boolean, example: true }
                  isViewable: { title: 'Check if record is viewable', description: 'Get data about fields, blocks and inventory.', type: boolean, example: true }
                  isReadOnly: { title: 'Check if record is read only (based on profiles)', description: 'Get data about fields, blocks and inventory.', type: boolean, example: false }
                  isEditableReadOnly: { title: 'Check if record is editable or read only (based on the field type)', description: 'Get data about fields, blocks and inventory.', type: boolean, example: false }
                  sequence: { title: 'Sequence field', description: 'Get data about fields, blocks and inventory.', type: integer, example: 24862 }
                  fieldparams: { title: 'Field params', description: 'Get data about fields, blocks and inventory.', type: object }
                  blockId: { title: 'Field block id', description: 'Get data about fields, blocks and inventory.', type: integer, example: 280 }
                  helpInfo: { title: 'Additional field description', description: 'Get data about fields, blocks and inventory.', type: string, example: 'Edit,Detail' }
                  dbStructure: { title: 'Info about field structure in database', description: 'Get data about fields, blocks and inventory.', type: object }
                  queryOperators: { title: 'Field query operators', description: 'Get data about fields, blocks and inventory.', type: object }
                  isEmptyPicklistOptionAllowed: { title: 'Defines empty picklist element availability', description: 'Get data about fields, blocks and inventory.', type: boolean, example: false }
                  referenceList: { title: 'List of related modules, available only for reference field', description: 'Get data about fields, blocks and inventory.', type: object, additionalProperties: { title: 'Tree item', type: string, example: Accounts } }
                  treeValues: { title: 'Tree items, available only for tree field', description: 'Get data about fields, blocks and inventory.', type: object, additionalProperties: { title: 'Tree item', properties: { id: { title: 'Number tree without prefix', description: 'Get data about fields, blocks and inventory.', type: integer, example: 1 }, tree: { title: 'Tree id', description: 'Get data about fields, blocks and inventory.', type: string, example: T10 }, parent: { title: 'Parent tree id', description: 'Get data about fields, blocks and inventory.', type: string, example: T1 }, text: { title: 'Tree value', description: 'Get data about fields, blocks and inventory.', type: string, example: 'Tree value' } }, type: object } }
                type: object
            blocks:
              title: 'List of all available blocks in the module'
              description: 'Get data about fields, blocks and inventory.'
              type: object
              additionalProperties:
                title: 'Block details'
                required:
                  - id
                  - tabid
                  - label
                  - sequence
                  - showtitle
                  - visible
                  - increateview
                  - ineditview
                  - indetailview
                  - display_status
                  - iscustom
                  - icon
                  - name
                properties:
                  id: { title: 'Block id', description: 'Get data about fields, blocks and inventory.', type: integer, example: 195 }
                  tabid: { title: 'Module id', description: 'Get data about fields, blocks and inventory.', type: integer, example: 9 }
                  label: { title: 'Block label', description: 'Get data about fields, blocks and inventory.', type: string, example: 'Account details' }
                  sequence: { title: 'Block sequence', description: 'Get data about fields, blocks and inventory.', type: integer, example: 1 }
                  showtitle: { title: 'Specifies whether the title should be visible', description: 'Get data about fields, blocks and inventory.', type: integer, example: 0 }
                  visible: { title: 'Determines the visibility', description: 'Get data about fields, blocks and inventory.', type: integer, example: 0 }
                  increateview: { title: 'Determines the visibility in creat view', description: 'Get data about fields, blocks and inventory.', type: integer, example: 0 }
                  ineditview: { title: 'Determines the visibility in edit view', description: 'Get data about fields, blocks and inventory.', type: integer, example: 0 }
                  indetailview: { title: 'Determines the visibility in detail view', description: 'Get data about fields, blocks and inventory.', type: integer, example: 0 }
                  display_status: { title: 'Determines whether the block should be expanded', description: 'Get data about fields, blocks and inventory.', type: integer, example: 2 }
                  iscustom: { title: 'Determines if the block has been added by the user', description: 'Get data about fields, blocks and inventory.', type: integer, example: 0 }
                  icon: { title: 'Block icon class', description: 'Get data about fields, blocks and inventory.', type: string, example: 'far fa-calendar-alt' }
                  name: { title: 'Block name translated into the user''s language', description: 'Get data about fields, blocks and inventory.', type: string, example: 'Informacje podstawowe o firmie' }
                type: object
            inventory:
              title: 'Inventory field group, available depending on the type of module'
              description: 'Get data about fields, blocks and inventory.'
              properties:
                '1':
                  title: 'Inventory field list'
                  description: 'Get data about fields, blocks and inventory.'
                  type: object
                  additionalProperties: { title: 'Inventory field details', required: [label, type, columnname, isSummary, isVisibleInDetail], properties: { label: { title: 'Field label translated into the user''s language', description: 'Get data about fields, blocks and inventory.', type: string, example: 'Unit price' }, type: { title: 'Field type', description: 'Get data about fields, blocks and inventory.', type: string, example: UnitPrice }, columnname: { title: 'Field column name in db', description: 'Get data about fields, blocks and inventory.', type: string, example: price }, isSummary: { title: 'Is the field contains summary', description: 'Get data about fields, blocks and inventory.', type: boolean, example: false }, isVisibleInDetail: { title: 'Check if field is visible in detail view', description: 'Get data about fields, blocks and inventory.', type: boolean, example: true } }, type: object }
              type: object
          type: object
      type: object
    BaseModule_Privileges_ResponseBody:
      title: 'Base module - Privileges response schema'
      description: 'Get privileges for module.'
      properties:
        status:
          title: 'A numeric value of 0 or 1 that indicates whether the communication is valid. 1 - success , 0 - error'
          description: 'Get privileges for module.'
          type: integer
          enum:
            - 0
            - 1
        result:
          title: 'List of module privileges'
          description: 'Get privileges for module.'
          type: object
          example:
            Import: true
            Export: true
          additionalProperties:
            title: Action
            type: boolean
      type: object
    BaseModule_Get_Record_Response:
      title: 'Base module - Response body for Record'
      required:
        - status
        - result
      properties:
        status:
          title: 'A numeric value of 0 or 1 that indicates whether the communication is valid. 1 - success , 0 - error'
          description: 'Get record detail.'
          type: integer
          enum:
            - 0
            - 1
        result:
          title: 'Record data'
          description: 'Get record detail.'
          required:
            - name
            - id
            - fields
            - data
          properties:
            name:
              title: 'Record name'
              description: 'Get record detail.'
              type: string
              example: 'Driving school'
            id:
              title: 'Record Id'
              description: 'Get record detail.'
              type: integer
              example: 152
            fields:
              title: 'System field names and field labels'
              description: 'Get record detail.'
              type: object
              additionalProperties:
                title: 'Field label'
                type: string
                example: 'Account name'
            data:
              $ref: '#/components/schemas/Record_Display_Details'
            privileges:
              title: 'Parameters determining checking of editing rights and moving to the trash'
              description: 'Get record detail.'
              required:
                - isEditable
                - moveToTrash
              properties:
                isEditable:
                  title: 'Check if record is editable'
                  description: 'Get record detail.'
                  type: boolean
                  example: true
                moveToTrash:
                  title: 'Permission to delete'
                  description: 'Get record detail.'
                  type: boolean
                  example: false
              type: object
            inventory:
              title: 'Value inventory data'
              description: 'Get record detail.'
              type: object
            summaryInventory:
              title: 'Value summary inventory data'
              description: 'Get record detail.'
              type: object
            rawData:
              $ref: '#/components/schemas/Record_Raw_Details'
            rawInventory:
              title: 'Inventory data'
              description: 'Get record detail.'
              type: object
          type: object
      type: object
    BaseModule_Delete_Record_Response:
      title: 'Base module - Transfer to the trash'
      description: 'List of records moved to the trash'
      required:
        - status
        - result
      properties:
        status:
          title: 'A numeric value of 0 or 1 that indicates whether the communication is valid. 1 - success , 0 - error'
          description: 'Delete record.'
          type: integer
          enum:
            - 0
            - 1
        result:
          title: 'Status of successful transfer of the record to the recycle bin'
          description: 'Delete record.'
          type: boolean
      type: object
    BaseModule_Put_Record_Response:
      title: 'Base module - Response body for Record'
      description: 'Contents of the response contains only id'
      required:
        - status
        - result
      properties:
        status:
          title: 'A numeric value of 0 or 1 that indicates whether the communication is valid. 1 - success , 0 - error'
          description: 'Edit record.'
          type: integer
          enum:
            - 0
            - 1
        result:
          title: 'Gets data for the record'
          description: 'Updated record id.'
          required:
            - id
          properties:
            id:
              title: 'Id of the newly created record'
              description: 'Edit record.'
              type: integer
              example: 22
            skippedData:
              title: 'List of parameters passed in the request that were skipped in the write process'
              description: 'Edit record.'
              type: object
          type: object
      type: object
    Record_Edit_Details:
      title: 'General - Record edit details'
      description: 'Record data in user format for edit view'
      type: object
      example:
        field_name_1: Tom
        field_name_2: Kowalski
        assigned_user_id: 1
        createdtime: '2014-09-24 20:51:12'
    Record_Raw_Details:
      title: 'General - Record raw details'
      description: 'Record data in the system format as stored in a database'
      type: object
      example:
        id: 11
        field_name_1: Tom
        field_name_2: Kowalski
        assigned_user_id: 1
        createdtime: '2014-09-24 20:51:12'
    Record_Display_Details:
      title: 'General - Record display details'
      description: 'Record data in user format for preview'
      type: object
      example:
        id: 11
        field_name_1: Tom
        field_name_2: Kowalski
        assigned_user_id: 'YetiForce Administrator'
        createdtime: '2014-09-24 20:51'
    BaseModule_Post_Record_Response:
      title: 'Base module - Created records'
      description: 'Contents of the response contains only id'
      required:
        - status
        - result
      properties:
        status:
          title: 'A numeric value of 0 or 1 that indicates whether the communication is valid. 1 - success , 0 - error'
          description: 'Create record.'
          type: integer
          enum:
            - 0
            - 1
        result:
          title: 'Gets data for the record'
          description: 'Created record id.'
          required:
            - id
          properties:
            id:
              title: 'Id of the newly created record'
              description: 'Create record.'
              type: integer
              example: 22
            skippedData:
              title: 'List of parameters passed in the request that were skipped in the write process'
              description: 'Create record.'
              type: object
          type: object
      type: object
    BaseModule_Get_RecordHistory_Response:
      title: 'Base module - Response action history record'
      description: 'Action module for recent activities in CRM'
      properties:
        status:
          title: 'A numeric value of 0 or 1 that indicates whether the communication is valid. 1 - success , 0 - error'
          description: 'Get related record list method.'
          type: integer
          enum:
            - 0
            - 1
        result:
          title: 'Returns recent activities that took place in CRM'
          description: 'Get related record list method.'
          type: object
          additionalProperties:
            title: 'Key indicating the number of changes made to a given record'
            properties:
              time:
                title: 'Showing the exact date on which the change took place'
                description: 'Get related record list method.'
                type: string
                example: '2019-10-07 08:32:38'
              owner:
                title: 'Username of the user who made the change'
                description: 'Get related record list method.'
                type: string
                example: 'System Admin'
              status:
                title: 'Name of the action that was carried out'
                description: 'Get related record list method.'
                type: string
                example: changed
              rawTime:
                title: 'Showing the exact date on which the change took place'
                description: 'Get related record list method.'
                type: string
                example: '2019-10-07 08:32:38'
              rawOwner:
                title: 'User ID of the user who made the change'
                description: 'Get related record list method.'
                type: integer
                example: 1
              rawStatus:
                title: 'The name of the untranslated label'
                description: 'Get related record list method.'
                type: string
                example: LBL_UPDATED
              data:
                title: 'Additional information'
                description: 'Get related record list method.'
                oneOf:
                  - { title: 'Record data create', type: object, additionalProperties: { properties: { label: { title: 'Translated field label', description: 'Get related record list method.', type: string, example: Name }, value: { title: 'Value, the data type depends on the field type', description: 'Get related record list method.', type: string, example: 'Jan Kowalski' }, raw: { title: 'Value in database format, only available in `x-raw-data`', description: 'Get related record list method.', type: string, example: 'Jan Kowalski' } }, type: object } }
                  - { title: 'Record data change', description: 'Edit, conversation', type: object, additionalProperties: { properties: { label: { title: 'Translated field label', description: 'Get related record list method.', type: string, example: Name }, from: { title: 'Value before change, the data type depends on the field type', description: 'Get related record list method.', type: string, example: 'Jan Kowalski' }, to: { title: 'Value after change, the data type depends on the field type', description: 'Get related record list method.', type: string, example: 'Jan Nowak' }, rawFrom: { title: 'Value before change, value in database format, only available in `x-raw-data`', description: 'Get related record list method.', type: string, example: 'Jan Kowalski' }, rawTo: { title: 'Value after change, value in database format, only available in `x-raw-data`', description: 'Get related record list method.', type: string, example: 'Jan Nowak' } }, type: object } }
                  - { title: 'Operations on related records', description: 'Adding relations, removing relations, transferring records', properties: { targetModule: { title: 'The name of the target related module', description: 'Get related record list method.', type: string, example: Contacts }, targetModuleLabel: { title: 'Translated module name', description: 'Get related record list method.', type: string, example: Kontakt }, targetLabel: { title: 'The label name of the target related module', description: 'Get related record list method.', type: string, example: 'Jan Kowalski' }, targetId: { title: 'Id of the target related module', description: 'Get related record list method.', type: integer, example: 394 } }, type: object }
            type: object
      type: object
    BaseModule_RecordRelatedList_ResponseBody:
      title: 'Base module - Response action related record list'
      description: 'Module action related record list response body'
      properties:
        status:
          title: 'A numeric value of 0 or 1 that indicates whether the communication is valid. 1 - success , 0 - error'
          description: 'Get related record list method.'
          type: integer
          enum:
            - 0
            - 1
        result:
          title: 'List of related records'
          description: 'Get related record list method.'
          properties:
            headers:
              title: 'Column names'
              description: 'Get related record list method.'
              type: object
              additionalProperties: {  }
            records:
              title: 'Records display details'
              description: 'Get related record list method.'
              type: object
              additionalProperties:
                $ref: '#/components/schemas/Record_Display_Details'
            rawData:
              title: 'Records raw details'
              description: 'Get related record list method.'
              type: object
              additionalProperties:
                $ref: '#/components/schemas/Record_Raw_Details'
            count:
              description: 'Get related record list method.'
              type: integer
              example: 54
            isMorePages:
              description: 'Get related record list method.'
              type: boolean
              example: true
          type: object
      type: object
    BaseModule_RecordsList_ResponseBody:
      title: 'Base module - Response action record list'
      description: 'Module action record list response body'
      properties:
        status:
          title: 'A numeric value of 0 or 1 that indicates whether the communication is valid. 1 - success , 0 - error'
          description: 'Get record list method.'
          type: integer
          enum:
            - 0
            - 1
        result:
          description: 'List of records'
          properties:
            headers:
              description: 'Column names'
              type: object
              additionalProperties: {  }
            records:
              description: 'Records display details'
              type: object
              additionalProperties:
                $ref: '#/components/schemas/Record_Display_Details'
            rawData:
              description: 'Records raw details'
              type: object
              additionalProperties:
                $ref: '#/components/schemas/Record_Raw_Details'
            numberOfRecords:
              description: 'Number of records on the page'
              type: integer
              example: 54
            isMorePages:
              description: 'There are more pages'
              type: boolean
              example: true
            numberOfAllRecords:
              description: 'Number of all records, dependent on the header `x-row-count`'
              type: integer
              example: 54
          type: object
      type: object
    BaseModule_Get_RelatedModules_Response:
      title: 'Base module - Response action related modules list'
      description: 'Module action related modules list response body'
      properties:
        status:
          title: 'A numeric value of 0 or 1 that indicates whether the communication is valid. 1 - success , 0 - error'
          description: 'Get related modules list method.'
          type: integer
          enum:
            - 0
            - 1
        result:
          title: 'List of related records'
          description: 'Get related modules list method.'
          properties:
            base:
              title: 'Base list'
              description: 'Get related modules list method.'
              type: object
              additionalProperties:
                properties:
                  type: { title: Type, description: 'Get related modules list method.', type: string, example: Summary }
                  label: { title: 'Translated label', description: 'Get related modules list method.', type: string, example: Summary }
                  icon: { title: 'Icon class', description: 'Get related modules list method.', type: string, example: 'far fa-address-card' }
                type: object
            related:
              title: 'Base list'
              description: 'Get related modules list method.'
              type: object
              additionalProperties:
                properties:
                  relationId: { title: 'Relation ID', description: 'Get related modules list method.', type: integer, example: 3 }
                  relatedModuleName: { title: 'Related module name', description: 'Get related modules list method.', type: string, example: Documents }
                  icon: { title: 'Icon class', description: 'Get related modules list method.', type: string, example: 'far fa-address-card' }
                  label: { title: 'Translated label', description: 'Get related modules list method.', type: string, example: Documents }
                type: object
          type: object
      type: object
    Users_Get_AccessActivityHistory_Response:
      title: 'Users module - History of access activity data'
      description: 'Get user history of access activity.'
      required:
        - status
        - result
      properties:
        status:
          title: 'A numeric value of 0 or 1 that indicates whether the communication is valid. 1 - success , 0 - error'
          description: 'Get user history of access activity.'
          type: integer
          enum:
            - 0
            - 1
        result:
          title: 'User data'
          description: 'Get user history of access activity.'
          type: object
          additionalProperties:
            title: 'Condition details'
            properties:
              time:
                title: 'Date time in user format'
                description: 'Get user history of access activity.'
                type: string
                example: '2021-06-01 11:57'
              status:
                title: 'Operation name'
                description: 'Get user history of access activity.'
                type: string
                example: 'Signed in'
              agent:
                title: 'User agent'
                description: 'Get user history of access activity.'
                type: string
                example: PostmanRuntime/7.28.0
              ip:
                title: 'IP address'
                description: 'Get user history of access activity.'
                type: string
                example: 127.0.0.1
            type: object
      type: object
    Users_Put_ChangePassword_Request:
      title: 'Users module - Users password change request body'
      required:
        - currentPassword
        - newPassword
      properties:
        currentPassword:
          title: 'Current password'
          description: 'Put method.'
          type: string
        newPassword:
          title: 'New password'
          description: 'Put method.'
          type: string
      type: object
    Users_Put_ChangePassword_Response:
      title: 'Users module - Users password change response body'
      description: 'Put method.'
      required:
        - status
        - result
      properties:
        status:
          title: 'A numeric value of 0 or 1 that indicates whether the communication is valid. 1 - success , 0 - error'
          description: 'Put method.'
          type: integer
          enum:
            - 0
            - 1
        result:
          title: 'Password change status'
          description: 'Put method.'
          type: boolean
          example: false
      type: object
    Header-Encrypted:
      title: 'Header - Encrypted'
      description: 'Is the content request is encrypted'
      type: integer
      default: 0
      enum:
        - 0
        - 1
    Conditions-Mix-For-Query-Generator:
      title: 'General - Mix conditions for query generator'
      description: 'Multiple or one condition for a query query generator'
      type: object
      oneOf:
        -
          $ref: '#/components/schemas/Condition-For-Query-Generator'
        -
          $ref: '#/components/schemas/Conditions-For-Query-Generator'
    Condition-For-Query-Generator:
      title: 'General - Condition for query generator'
      description: 'One condition for query generator'
      required:
        - fieldName
        - value
        - operator
      properties:
        fieldName:
          description: 'Field name'
          type: string
          example: lastname
        value:
          description: 'Search value'
          type: string
          example: Kowalski
        operator:
          description: 'Field operator'
          type: string
          example: e
        group:
          description: 'Condition group if true is AND'
          type: boolean
          example: true
      type: object
    Conditions-For-Query-Generator:
      title: 'General - Conditions for query generator'
      description: 'Multiple conditions for query generator'
      type: object
      additionalProperties:
        description: 'Condition details'
        type: object
    Conditions-For-Native-Query:
      title: 'General - Conditions for native query'
      description: 'Conditions for native query, based on YII 2'
      type: object
      externalDocs:
        description: 'Database communication engine'
        url: 'https://yetiforce.com/en/knowledge-base/documentation/developer-documentation/item/new-db-communication-engine'
      example:
        column_name1: 'searched value 1'
        column_name2: 'searched value 2'
    Users_Login_RequestBody:
      title: 'Users module - Users login request body'
      description: 'JSON or form-data'
      required:
        - userName
        - password
      properties:
        userName:
          description: 'Webservice user name'
          type: string
        password:
          description: 'Webservice user password'
          type: string
        code:
          description: '2FA TOTP code (optional property), Pass code length = 6, Code period = 30'
          type: string
        params:
          description: 'Additional parameters sent by the user, extending the current settings, e.g. language'
          properties:
            language:
              description: 'Post method.'
              type: string
              example: pl-PL
          type: object
      type: object
    Users_Login_ResponseBody:
      title: 'Users module - Users login response body'
      description: 'Users login response body'
      required:
        - status
        - result
      properties:
        status:
          title: 'A numeric value of 0 or 1 that indicates whether the communication is valid. 1 - success , 0 - error'
          description: 'Post method.'
          type: integer
          enum:
            - 0
            - 1
        result:
          description: 'Content of responses from a given method'
          required:
            - token
            - name
            - lastLoginTime
            - lastLogoutTime
            - language
            - type
            - login_method
            - preferences
          properties:
            token:
              description: 'Post method.'
              type: string
              maxLength: 40
              minLength: 40
            name:
              description: 'Post method.'
              type: string
            lastLoginTime:
              description: 'Post method.'
              type: string
              example: '2019-10-07 08:32:38'
            lastLogoutTime:
              description: 'Post method.'
              type: string
              example: ''
            language:
              description: 'Post method.'
              type: string
              example: pl-PL
            type:
              description: 'Post method.'
              type: integer
            login_method:
              description: 'Post method.'
              type: string
              enum:
                - PLL_PASSWORD
                - PLL_PASSWORD_2FA
              example: PLL_PASSWORD_2FA
            logged:
              description: 'Post method.'
              type: boolean
            preferences:
              description: 'Post method.'
              required:
                - hour_format
                - start_hour
                - end_hour
                - date_format
                - time_zone
                - currency_id
                - currency_grouping_pattern
                - currency_decimal_separator
                - currency_grouping_separator
                - currency_symbol_placement
                - no_of_currency_decimals
                - currency_name
                - currency_code
                - currency_symbol
                - conv_rate
              properties:
                hour_format:
                  description: 'Post method.'
                  type: string
                  example: '24'
                start_hour:
                  description: 'Post method.'
                  type: string
                  example: '08:00'
                end_hour:
                  description: 'Post method.'
                  type: string
                  example: '16:00'
                date_format:
                  description: 'Post method.'
                  type: string
                  example: yyyy-mm-dd
                time_zone:
                  description: 'Post method.'
                  type: string
                  example: Europe/Warsaw
                currency_id:
                  description: 'Post method.'
                  type: integer
                  example: 1
                currency_grouping_pattern:
                  description: 'Post method.'
                  type: string
                  example: '123,456,789'
                currency_decimal_separator:
                  description: 'Post method.'
                  type: string
                  example: .
                currency_grouping_separator:
                  description: 'Post method.'
                  type: string
                  example: ' '
                currency_symbol_placement:
                  description: 'Post method.'
                  type: string
                  example: 1.0$
                no_of_currency_decimals:
                  description: 'Post method.'
                  type: integer
                  example: 2
                currency_name:
                  description: 'Post method.'
                  type: string
                  example: 'Poland, Zlotych'
                currency_code:
                  description: 'Post method.'
                  type: string
                  example: PLN
                currency_symbol:
                  description: 'Post method.'
                  type: string
                  example: zł
                conv_rate:
                  description: 'Post method.'
                  type: number
                  format: float
                  example: 1
              type: object
            authy_methods:
              description: 'Post method.'
              type: string
              enum:
                - ''
                - PLL_AUTHY_TOTP
              example: PLL_AUTHY_TOTP
            2faObligatory:
              description: 'Post method.'
              type: boolean
              example: true
          type: object
      type: object
    Exception:
      title: 'General - Error exception'
      required:
        - status
        - error
      properties:
        status:
          title: '0 - error'
          description: 'Post method.'
          type: integer
          enum:
            - 0
          example: 0
        error:
          description: 'Error  details'
          required:
            - message
            - code
          properties:
            message:
              description: 'To show more details turn on: config\Debug.php apiShowExceptionMessages = true'
              type: string
              example: 'Invalid method'
            code:
              description: 'Post method.'
              type: integer
              example: 405
            file:
              description: 'default disabled to enable set: config\Debug.php apiShowExceptionBacktrace = true'
              type: string
              example: api\webservice\RestApi\BaseAction\Files.php
            line:
              description: 'default disabled to enable set: config\Debug.php apiShowExceptionBacktrace = true'
              type: integer
              example: 101
            previous:
              description: 'Previous exception'
              type: object
            backtrace:
              description: 'default disabled to enable set: config\Debug.php apiShowExceptionBacktrace = true'
              type: string
              example: '#0 api\webservice\RestApi\BaseAction\Files.php (101) ....'
          type: object
      type: object
    UsersLogoutResponseBody:
      title: 'Users module - Users logout response body'
      description: 'JSON data'
      required:
        - status
        - result
      properties:
        status:
          title: 'A numeric value of 0 or 1 that indicates whether the communication is valid. 1 - success , 0 - error'
          description: 'Put method.'
          type: integer
          enum:
            - 0
            - 1
        result:
          description: 'Content of responses from a given method'
          type: boolean
      type: object
    Users_Get_Record_Response:
      title: 'Users module - Response body for user'
      description: 'Get user detail.'
      properties:
        status:
          title: 'A numeric value of 0 or 1 that indicates whether the communication is valid. 1 - success , 0 - error'
          description: 'Get user detail.'
          type: integer
          enum:
            - 0
            - 1
        result:
          description: 'User data'
          properties:
            name:
              description: 'User label'
              type: string
              example: 'System Admin'
            id:
              description: 'User Id'
              type: integer
              example: 1
            fields:
              description: 'Field name items'
              type: object
            data:
              description: 'User data'
              type: object
            privileges:
              description: 'Parameters determining checking of editing rights and moving to the trash'
              properties:
                isEditable:
                  description: 'Check if user is editable'
                  type: boolean
                  example: true
                moveToTrash:
                  description: 'Permission to delete'
                  type: boolean
                  example: false
              type: object
            rawData:
              description: 'Raw user data'
              type: object
          type: object
      type: object
    Users_RecordsList_ResponseBody:
      title: 'Users module - Response action users list'
      description: 'Module action record list response body'
      properties:
        status:
          title: 'A numeric value of 0 or 1 that indicates whether the communication is valid. 1 - success , 0 - error'
          description: 'Get users list method.'
          type: integer
          enum:
            - 0
            - 1
        result:
          description: 'List of records'
          properties:
            headers:
              description: 'Column names'
              type: object
              additionalProperties: {  }
            records:
              description: 'Records display details'
              type: object
              additionalProperties:
                $ref: '#/components/schemas/Record_Display_Details'
            rawData:
              description: 'Records raw details'
              type: object
              additionalProperties:
                $ref: '#/components/schemas/Record_Raw_Details'
            count:
              description: 'Get users list method.'
              type: integer
              example: 54
            isMorePages:
              description: 'Get users list method.'
              type: boolean
              example: true
          type: object
      type: object
    Users_Post_ResetPassword_Request:
      title: 'Users module - Users password reset request body'
      required:
        - userName
      properties:
        userName:
          title: 'User name / email'
          description: 'Post method.'
          type: string
      type: object
    Users_Post_ResetPassword_Response:
      title: 'Users module - Users password reset response body'
      description: 'Post method.'
      required:
        - status
        - result
      properties:
        status:
          title: 'A numeric value of 0 or 1 that indicates whether the communication is valid. 1 - success , 0 - error'
          description: 'Post method.'
          type: integer
          enum:
            - 0
            - 1
        result:
          title: 'Content of responses from a given method'
          description: 'Post method.'
          properties:
            expirationDate:
              description: 'Post method.'
              type: string
              example: '2019-10-07 08:32:38'
            mailerStatus:
              description: 'Post method.'
              type: boolean
              example: true
          type: object
      type: object
    Users_Put_ResetPassword_Request:
      title: 'Users module - Users password reset request body'
      required:
        - token
        - password
      properties:
        token:
          title: 'A one-time password reset token'
          description: 'Put method.'
          type: string
        password:
          title: 'New password'
          description: 'Put method.'
          type: string
      type: object
    Users_Put_ResetPassword_Response:
      title: 'Users module - Users password reset response body'
      description: 'Put method.'
      required:
        - status
        - result
      properties:
        status:
          title: 'A numeric value of 0 or 1 that indicates whether the communication is valid. 1 - success , 0 - error'
          description: 'Put method.'
          type: integer
          enum:
            - 0
            - 1
        result:
          title: 'Password reset status'
          description: 'Put method.'
          type: boolean
          example: false
      type: object
    Users_Get_TwoFactorAuth_Response:
      title: 'Users module - Authentication secret details'
      description: 'Get user history of access activity.'
      required:
        - status
        - result
      properties:
        status:
          title: 'A numeric value of 0 or 1 that indicates whether the communication is valid. 1 - success , 0 - error'
          description: 'Get user history of access activity.'
          type: integer
          enum:
            - 0
            - 1
        result:
          title: 'Content of responses from a given method'
          description: 'Get user history of access activity.'
          required:
            - authMethods
            - secretKey
          properties:
            authMethods:
              description: 'Get user history of access activity.'
              type: string
              example: TOTP
            secretKey:
              description: 'Get user history of access activity.'
              type: string
              example: LJUJWCOEGUKP6WS2
          type: object
      type: object
    Users_post_TwoFactorAuth_Response:
      title: 'Users module - Activate two factor authentication'
      description: 'Activate two factor authentication response body'
      properties:
        status:
          title: 'A numeric value of 0 or 1 that indicates whether the communication is valid. 1 - success , 0 - error'
          description: 'Post method.'
          type: integer
          enum:
            - 0
            - 1
        result:
          description: 'Content of responses from a given method'
          type: string
      type: object
    Users_Delete_TwoFactorAuth_Response:
      title: 'Users module - Disable two factor authentication'
      description: 'Disable two factor authentication response'
      properties:
        status:
          description: 'A numeric value of 0 or 1 that indicates whether the communication is valid. 1 - success, 0 - error'
          type: integer
          enum:
            - 0
            - 1
        result:
          description: 'Status of successful'
          type: boolean
      type: object
  securitySchemes:
    basicAuth:
      type: http
      description: 'Basic Authentication header'
      scheme: basic
    ApiKeyAuth:
      type: apiKey
      description: 'Webservice api key header'
      name: X-API-KEY
      in: header
    token:
      type: apiKey
      description: 'Webservice api token by user header'
      name: X-TOKEN
      in: header
  links:
    GetRecordById:
      operationId: getRecord
      parameters:
        recordId: '$response.body#/result/id'
      description: 'The `id` value returned in the response can be used as the `recordId` parameter in `GET /webservice/{moduleName}/Record/{recordId}`.'
tags:
  -
    name: BaseModule
    description: 'Access to record methods'
  -
    name: Users
    description: 'Access to user methods'
